--- third_party/g2docsmd-html/exportmd.gs	2023-10-20 22:03:56.577441177 +0000
+++ apps_script/exportmd.gs	2023-10-20 22:45:27.268431292 +0000
@@ -1,4 +1,22 @@
-/*
+/**
+ * Copyright 2023 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/* Original script is from:
+https://github.com/lmmx/gdocs2md-html/blob/master/exportmd.gs
+and commit: 0d86cfa
 Parsing from mangini/gdocs2md.
 Modified by clearf to add files to the google directory structure.
 Modified by lmmx to write Markdown, going back to HTML-incorporation.
@@ -601,7 +619,7 @@
 
 }
 
-function convertDocumentToMarkdown(document, destination_folder, optional_switches) {
+function convertDocumentToMarkdown(document, destination_folder, frontmatter_input, optional_switches) {
   // if returning a string, force_save_images will make the script continue - experimental
   var possible_switches = ['return_string', 'force_save_images'];
   var property_name = 'conversion_switches';
@@ -614,8 +632,13 @@
 
   var image_prefix = script_properties.getProperty("image_folder_prefix");
   var numChildren = document.getActiveSection().getNumChildren();
-  var text = "";
-  var md_filename = document.getName()+".md";
+  if (frontmatter_input != "") {
+    var text = frontmatter_input;
+  }
+  else {
+    var text = ""
+  }
+  var md_filename = sanitizeFileName(document.getName()) + ".md";
   var image_foldername = document.getName()+"_images";
   var inSrc = false;
   var inClass = false;
@@ -724,7 +747,7 @@
     }
    DriveApp.removeFile(saved_file) // Removes from google drive root.
   }
-
+return saved_file;
 }
 
 function escapeHTML(text) {
@@ -738,6 +761,9 @@
 // Process each child element (not just paragraphs).
 function processParagraph(index, element, inSrc, imageCounter, listCounters, image_path) {
   // First, check for things that require no processing.
+  if (element.getType() === DocumentApp.ElementType.UNSUPPORTED) {
+    return null;
+  }
   if (element.getNumChildren()==0) {
     return null;
   }
@@ -769,6 +795,11 @@
     textElements.push("</table>\n");
   }
 
+  // Need to handle this element type, return null for now
+  if (element.getType() === DocumentApp.ElementType.CODE_SNIPPET) {
+    return null
+  }
+
   // Process various types (ElementType).
   for (var i = 0; i < element.getNumChildren(); i++) {
     var t = element.getChild(i).getType();
@@ -811,12 +842,38 @@
 
       result.images.push({ "blob" : blob } )
 
-    } else if (t === DocumentApp.ElementType.PAGE_BREAK) {
+    // Need to fix this case TODO
+    } else if (t === DocumentApp.ElementType.INLINE_DRAWING) {
+
+      imageCounter++;
+      if (!return_string || force_save_images) {
+        textElements.push('![](' + "drawing" + '/' + " name" + ')');
+      } else {
+        textElements.push('![](' + "drawing" + ')');
+      }
+      //result.images.push( {
+      //  "bytes": blob.getBytes(),
+      //  "type": contentType,
+      //  "name": name});
+
+      // result.images.push({ "blob" : blob } )
+
+    }
+     else if (t === DocumentApp.ElementType.PAGE_BREAK) {
       // ignore
     } else if (t === DocumentApp.ElementType.HORIZONTAL_RULE) {
       textElements.push('* * *\n');
     } else if (t === DocumentApp.ElementType.FOOTNOTE) {
       textElements.push(' ('+element.getChild(i).getFootnoteContents().getText()+')');
+    // Fixes for new elements
+    } else if (t === DocumentApp.ElementType.DATE) {
+      textElements.push(' ('+element.getChild(i)+')');
+    } else if (t === DocumentApp.ElementType.RICH_LINK) {
+      textElements.push(' ('+element.getChild(i).getUrl()+')');
+    } else if (t === DocumentApp.ElementType.PERSON) {
+      textElements.push(element.getChild(i).getName() + ', ');
+    } else if (t === DocumentApp.ElementType.UNSUPPORTED) {
+      textElements.push(' <UNSUPPORTED> ');
     } else {
       throw "Paragraph "+index+" of type "+element.getType()+" has an unsupported child: "
       +t+" "+(element.getChild(i)["getText"] ? element.getChild(i).getText():'')+" index="+index;
@@ -828,10 +885,17 @@
     return result;
   }
 
-  var ind_f = element.getIndentFirstLine();
-  var ind_s = element.getIndentStart();
-  var ind_e = element.getIndentEnd();
-  var i_fse = ['ind_f','ind_s','ind_e'];
+// Fix for unrecognized command getIndentFirstLine
+  var ind_f = 0;
+  var ind_s = 0;
+  var ind_e = 0;
+  if (t === DocumentApp.ElementType.PARAGRAPH) {
+
+    var ind_f = element.getIndentFirstLine();
+    var ind_s = element.getIndentStart();
+    var ind_e = element.getIndentEnd();
+  }
+  var i_fse = [ind_f,ind_s,ind_e];
   var indents = {};
   for (indt=0;indt<i_fse.length;indt++) {
     var indname = i_fse[indt];
@@ -876,7 +940,7 @@
   }
 
   var indent_prefix = '> ';
-# var indent_alt_prefix = '> <sub>';
+  var indent_alt_prefix = '> <sub>';
   if (inIndent && !inSrc) {
     if (/^#*\s/.test(result.text)) { // don't subscript-prefix header prefix
       result.text = indent_alt_prefix + result.text;
